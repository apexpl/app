<?php
declare(strict_types=1);

namespace Apex\App\Pkg\Gpt;

/**
 * GPT - SQL Database Schema
 */
class GptSqlSchema extends GPtClient
{

    /**
     * Generate
     */
    public function generate(string $pkg_alias, array $chat):?array
    {

        // Get SQL code
        if (!$install_sql = $this->getSqlCode($pkg_alias, $chat)) {
            return null;
        }

        // Save install sql
        $tables = $this->saveInstallSql($pkg_alias, $install_sql);

        // Save drop sql
        $tables = $this->saveDropSql($pkg_alias, $tables);

        // Return
        echo "Executing SQL schema against database... done.\n";
        echo "Saving database migrations... done.\n";
        return $tables;
    }

    /**
     * Get SQL code
     */
    private function getSqlCode(string $pkg_alias, array $chat):?string
    {

        // Set message
        $tbl_prefix = "'" . str_replace("-", "_", $pkg_alias) . "_'";
        $message = "Write a SQL database schema for the project with the following rules:\n\n";
        $message .= "- Prefix all table names with '$tbl_prefix'\n";
        $message .= "- Pluralize most table names\n";
        $message .= "- Ensure all tables have a 'id' column with type 'INT NOT NULL AUTO_INCREMENT' column for all primary keys\n";
        $message .= "- For most tables unless it doesn't make sense, add the timestamp columns of 'created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP' and 'updated_at TIMESTAMP'\n";
        $message .= "- Add foreign key constraints as necessary that delete on cascade and order tables properly so the resulting SQL code can be imported without foreign key errors\n";
        $message .= "- For any 'uuid VARCHAR(30)' columns add a foreign key constraint that references 'armor_users (uuid)' and deletes on cascade.  The 'armor_users' table will already exist within the database and can be ignored by Chat GPT.\n";
        $message .= "- TTry to infer VARCHAR() column lengths based on column name. instead of only defaulting to 255\n";
        $this->cli->send("Sending request to OpenAPI.  Please be patient, this may take a moment...\n");

        // Send message, generate SQL schema
        if (!$sql = $this->send($message, $chat)) {
            return null;
        }

        // Save SQL, allow user to modify as desired
        file_put_contents(SITE_PATH . '/chat_gpt.sql', $sql);
        $this->cli->send("A file named 'chat_gpt.sql' has been saved within this directory, and contains the SQL database schema as generated by Chat GPT.  Please modify the schema as desired, and press enter once done to continue with code generation.\n\n");
        $this->cli->getInput("");

        // Get sql and return
        $sql = file_get_contents(SITE_PATH . '/chat_gpt.sql');
        return $sql;
    }

    /**
     * Save install SQL files
     */
    private function saveInstallSql(string $pkg_alias, string $install_sql):array
    {

        // Get all table names
        $tables = [];
        preg_match_all("/CREATE TABLE (.+?)\s/i", $install_sql, $sql_match, PREG_SET_ORDER);
        foreach ($sql_match as $match) {
            $tables[$match[1]] = 'parent';
        }

        // Append to SQL files
        $etc_dir = SITE_PATH . '/etc/' . $this->convert->case($pkg_alias, 'title');
        file_put_contents("$etc_dir/install.sql", "\n\n$install_sql\n", FILE_APPEND);

        // Execute SQL
        $this->db->executeSqlFile(SITE_PATH . '/chat_gpt.sql');
        @unlink(SITE_PATH . '/chat_gpt.sql');

        // Return
        return $tables;
    }

    /**
     * Save drop sql
     */
    private function saveDropSql(string $pkg_alias, array $tables):array
    {

        // GO through tables
        $drop_tables = [];
        foreach (array_keys($tables) as $table) {

            // Check foreign keys
            $foreign_keys = $this->db->getForeignKeys($table);
            $foreign_tables = array_values(array_map(fn($item) => $item['table'], $foreign_keys));

            // Check if child table
            $is_child = false;
            foreach ($foreign_tables as $tbl) {
                if (in_array($tbl, array_keys($tables))) {
                    $is_child = true;
                }
            }

            // Update tables as necessary
            if ($is_child === false) {
                $drop_tables[] = $table;
            } else {
                $tables[$table] = 'child';
                array_unshift($drop_tables, $table);
            }
        }

        // Create SQL
        $sql = '';
        foreach ($drop_tables as $table) {
            $sql .= "DROP TABLE IF EXISTS " . $table . ";\n";
        }

        // Save to SQL file
        $filename = SITE_PATH . '/etc/' . $this->convert->case($pkg_alias, 'title') . '/remove.sql';
        file_put_contents($filename, "\n\n$sql\n\n", FILE_APPEND);

        // Return
        return $tables;
    }

}



